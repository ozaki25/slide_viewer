(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

+(function ($) {
    'use strict';

    var SlideViewer = function SlideViewer(element) {
        this.$element = $(element);
        this.$slides = this.$element.children('.slide-image');
        this.current = 0;

        this.showToolbar();
        this.change();
    };

    SlideViewer.prototype.showToolbar = function () {
        var toolbar = $('<div>').addClass('toolbar');
        var pager = this.getPagerHtml();
        this.$prev = this.getChangeSlideIconHtml('prev');
        this.$next = this.getChangeSlideIconHtml('next');
        toolbar.append(this.$prev).append(pager).append(this.$next);
        this.$element.append(toolbar);
    };

    SlideViewer.prototype.getPagerHtml = function () {
        var pager = $('<div>').addClass('slide-pager');
        this.$currentPage = $('<span>').addClass('current-page');
        this.$totalPage = $('<span>').addClass('total-page');
        return pager.append(this.$currentPage).append(' / ').append(this.$totalPage);
    };

    SlideViewer.prototype.getChangeSlideIconHtml = function (direction) {
        var div = $('<div>').addClass('change-slide').addClass(direction).data('direction', direction);
        var icon = $('<span>').addClass(this.getIconClass(direction));
        return div.append(icon);
    };

    SlideViewer.prototype.getIconClass = function (direction) {
        return direction === 'prev' ? 'glyphicon glyphicon-chevron-left' : direction === 'next' ? 'glyphicon glyphicon-chevron-right' : '';
    };

    SlideViewer.prototype.change = function (direction) {
        var next = this.getNextSlideNum(direction);
        if (next < 0 || this.$slides.length <= next) return;

        this.current = next;
        this.reset();
        this.showSlide();
        this.startOrEndDisabled();
        this.changePageNum();
    };

    SlideViewer.prototype.getNextSlideNum = function (direction) {
        return direction === 'prev' ? this.current - 1 : direction === 'next' ? this.current + 1 : this.current;
    };

    SlideViewer.prototype.reset = function () {
        this.$slides.hide().removeClass('active');
        this.$prev.removeClass('disabled');
        this.$next.removeClass('disabled');
    };

    SlideViewer.prototype.showSlide = function () {
        var $slide = $(this.$slides.get(this.current));
        $slide.show().addClass('active');
    };

    SlideViewer.prototype.startOrEndDisabled = function () {
        if (this.current === 0) this.$prev.addClass('disabled');
        if (this.current === this.$slides.length - 1) this.$next.addClass('disabled');
    };

    SlideViewer.prototype.changePageNum = function () {
        this.$currentPage.text(this.current + 1);
        this.$totalPage.text(this.$slides.length);
    };

    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data('slide-viewer');
            if (!data) $this.data('slide-viewer', data = new SlideViewer(this, option));
            if (option && option.change) data.change(option.change);
        });
    }

    var old = $.fn.slideViewer;

    $.fn.slideViewer = Plugin;
    $.fn.slideViewer.Constructor = SlideViewer;

    $.fn.tooltip.noConflict = function () {
        $.fn.tooltip = old;
        return this;
    };

    $(document).on('click', '.change-slide', function () {
        var $this = $(this);
        var $target = $this.closest('.slide-images');
        var option = { change: $this.data('direction') };
        Plugin.call($target, option);
    });

    $(function () {
        $('.slide-images').slideViewer();
    });
})(jQuery);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
